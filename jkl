machine="$HOSTNAME"

show_choosen_option () {
    echo -ne "$(tput sgr0)$(tput setaf 5)\n$1$(tput el)$(tput sgr0)\n\n"
}

do_rebuild () {
    sudo nixos-rebuild --max-jobs "$(nproc)" --flake "$HOME/.dotfiles/nixos#$machine" switch "$@"
}

main_menu () {
    tput sc
    echo -ne "$(tput setab 000; tput setaf 4)\n=================================== Select operations to perform on $(tput setaf 3)${machine}$(tput setaf 4)$(tput el)"
    echo -ne "\n$(tput el)"
    echo -ne "\na - stage (all)$(tput el)"
    echo -ne "\ns - scan$(tput el)"
    echo -ne "\nd - diff unstaged$(tput el)"
    echo -ne "\nD - diff staged$(tput el)"
    echo -ne "\ne - diff origin$(tput el)"
    echo -ne "\nf - fetch$(tput el)"
    echo -ne "\ng - merge origin$(tput el)"
    echo -ne "\nh - commit & push$(tput el)"
    echo -ne "\n$(tput el)"
    echo -ne "\nj - rebuild$(tput el)"
    echo -ne "\nk - commit, push & rebuild$(tput el)"
    echo -ne "\nl - commit, push, update flake.lock & rebuild$(tput el)"
    echo -ne "\nL - update invididual <input>$(tput el)"
    echo -ne "\n$(tput el)"
    echo -ne "\n$(tput el)"
    read -r -n 1 OPERATIONS
    tput rc
    tput ed
    tput sgr0
    if [[ "$OPERATIONS" == "a" ]]; then
	show_choosen_option "a ================================> Stage (all)"
	cd "$(git rev-parse --show-toplevel)" || return
	git add . 
	sleep 0.4 # sleeps for the user to notice the 'a ===> ...' message.
	main "$@" 
    elif [[ "$OPERATIONS" == "s" ]]; then
	show_choosen_option "s ================================> Scan"
	git secrets --list && sleep 2 && git secrets --scan -r "$(git rev-parse --show-toplevel)"
        # sleeps for the user to get informed of any existing/non-existing secrets provider/s.
    elif [[ "$OPERATIONS" == "d" ]]; then
	show_choosen_option "d ================================> Diff unstaged"
	git diff --color=always | less; main "$@"
    elif [[ "$OPERATIONS" == "D" ]]; then
	show_choosen_option "D ================================> Diff staged"
	git diff --staged --color=always | less; main "$@"
    elif [[ "$OPERATIONS" == "e" ]]; then
	show_choosen_option "e ================================> Diff origin"
	git diff origin/main --color=always | less; main "$@"
    elif [[ "$OPERATIONS" == "f" ]]; then
	show_choosen_option "f ================================> Fetch"
	fetch_out="$(git fetch 2>&1 >/dev/null)"
	# git uses stderr for "chatty messages" that are not errors.
	echo "$fetch_out" # leave output in the scrollback buffer
	[[ "${#fetch_out}" -gt "0" ]] && git diff origin/main --color=always | less
	main "$@"
    elif [[ "$OPERATIONS" == "g" ]]; then
	show_choosen_option "g ================================> Merge origin"
	git merge origin/main
    elif [[ "$OPERATIONS" == "h" ]]; then
	show_choosen_option "h ================================> Commit & push"
	git commit -a -m "$(date '+%Y_%m_%d-%T') - From '$machine': Commit & push"
	git push
    elif [[ "$OPERATIONS" == "j" ]]; then
	show_choosen_option "j ================================> Rebuild $machine"
	do_rebuild "$@"
    elif [[ "$OPERATIONS" == "k" ]]; then
	show_choosen_option "k ================================> Commit, push & rebuild $machine"
	git commit -a -m "$(date '+%Y_%m_%d-%T') - From '$machine': Commit, push, & rebuild"
	git push
	do_rebuild "$@"
    elif [[ "$OPERATIONS" == "l" ]]; then
	show_choosen_option "l ================================> Commit, push, update flake.lock & rebuild $machine"
	git commit -a -m "$(date '+%Y_%m_%d-%T') - From '$machine': Commit, push, update flake.lock & rebuild"
	git push
	nix flake update
	do_rebuild "$@"
    elif [[ "$OPERATIONS" == "L" ]]; then
	tput sc
	echo ""
	read -r -p "$(tput setab 0)$(tput setaf 5)input name: $(tput setaf 3)$(tput el)" input_name
	tput sgr0
	tput ed
	tput rc
	show_choosen_option "L ================================> Update input: $(tput setaf 3)$input_name"
	nix flake update "$input_name"
    else
	tput el; echo ""; exit 1
    fi
}


main() {
    # make scrollback buffer more readable:
    echo -e "$(tput setaf 5)\n=================================== Git status$(tput sgr0)\n" 
    clear -x
    cd ~/.dotfiles/nixos || exit 1
    git status
    main_menu "$@"
}

main
